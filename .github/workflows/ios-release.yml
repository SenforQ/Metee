name: Build and Distribute

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.27.3'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
      
      # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products

      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      # 设置 CocoaPods
      # - name: Setup CocoaPods
      #   run: |
      #     cd ios
      #     rm -rf Pods
      #     rm -f Podfile.lock
      #     pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"


      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: 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

          certificate-password: 111111
          
          provisioning-profile-base64: 


          keychain-password: 111111

      # # 添加检查步骤
      - name: 检查构建文件
        run: |
          echo "检查 build/ios/ipa 目录内容："
          ls -la build/ios/ipa/
          echo "检查 build/ios 目录内容："
          ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa

          
      # - name: Upload using iTMSTransporter
      #   env:
      #     WORKING_DIRECTORY: build/ios/ipa
      #     IPA_FILE_NAME: oiyo.ipa
      #     APPLE_USERNAME: Nina2000HH@outlook.com
      #     APPLE_PASSWORD: zeqo-kyio-mlkw-kbwf
      #     APPLE_ASC_PROVIDER: 798RL7J5U7
      #   run: |
      #     cd $WORKING_DIRECTORY
      #     git clone https://github.com/ZhangLi1984/itsm.git
      #     ./itsm/bin/iTMSTransporter -assetFile $IPA_FILE_NAME -u $APPLE_USERNAME -p $APPLE_PASSWORD -m upload -asc_provider $APPLE_ASC_PROVIDER -v verbose

      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/metee.ipa"
          APPLE_ID: "PageEldon58434@outlook.com"
          APP_SPECIFIC_PASSWORD: "xwbp-ywgm-jhkn-iffv"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
